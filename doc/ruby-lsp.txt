*ruby-lsp* Ruby LSP

==============================================================================

Making the Ruby LSP experience on Neovim a little nicer out of the box.

Features:
- Automatic installation of the `ruby-lsp` if one is not detected at Neovim
  startup.

- Automatic disabling of Mason for managing `ruby-lsp`.

- Some conveniences around interacting with the Ruby LSP.

- Basic code lens support.

# Setup ~

This module needs a setup with `require('ruby-lsp').setup({})` (replace `{}`
with your `config` table).

# Comparisons ~

'mason' and 'mason-lspconfig':
  Installs all Ruby tooling in a non-versioned folder, which can cause issues
  when multiple versions of Ruby are in use.

'nvim-lspconfig':
  Complimentary, but satisfies the lowest common denominator across all LSP
  implementations. A good baseline that we build on top of.

# Customizing ~

The automatic installation of the `ruby-lsp` gem can be disabled by passing
`auto_install = false` in the `config` table.

The (experimental) launcher of the `ruby-lsp` can be enabled by passing
`use_launcher = true` in the `config` table.

The automatic detection of Standard or Rubocop can be enabled by passing
`autodetect_tools = true` in the `config` table.

Any `lspconfig` valid tables can be passed through the `lspconfig` key in the
`config` table, which will be merged with the default `lspconfig`.

------------------------------------------------------------------------------
COMMANDS					            *ruby-lsp-commands*

- `:RubyDeps` displays the dependencies of the Ruby project inside a quickfix
  window. Pass `all` as an argument to return dependencies of dependencies.

- `:RubyLspUpdate` updates the globally installed `ruby-lsp` gem, and then
  removes any existing `.ruby-lsp` folder in the current working directory. It
  will then perform a restart of the `ruby_lsp` server.

- `:RubyLspLog` displays the last 100 entries emitted by the `ruby_lsp`
  server.

 vim:tw=78:ts=8:noet:ft=help:norl:
